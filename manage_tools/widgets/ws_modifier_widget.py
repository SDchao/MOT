from typing import List

from PySide2.QtWidgets import QListWidget, QHBoxLayout, QPushButton, QApplication

from manage_tools.widgets.modifier_widget_parent import ModifierWidget
from manage_tools.widgets.ws_edit_widget import WsEditWidget
from operators.motlogging import logger
from operators.ws_reader import read_ws, WsData


class WsModifierWidget(ModifierWidget):
    ws_data_list: List[WsData]
    file_ext = ".ws"
    now_file_path = ""

    def __init__(self):
        super(WsModifierWidget, self).__init__()
        self.paint_board.init_show_all = True

        desktop_rect = QApplication.primaryScreen().geometry()

        self.ws_list_widget = QListWidget(self)
        self.ws_list_widget.setMaximumWidth(desktop_rect.width() * 0.8 * 0.15)
        self.ws_list_widget.currentItemChanged.connect(self._on_current_item_changed)

        self.delete_button = QPushButton("删除选中记录")
        self.delete_button.clicked.connect(self._on_delete_button_clicked)

        self.unselect_button = QPushButton("取消选择")
        self.unselect_button.clicked.connect(self._on_unselect_button_clicked)

        self.left_v_layout.addWidget(self.ws_list_widget)
        self.left_v_layout.addWidget(self.delete_button)
        self.left_v_layout.addWidget(self.unselect_button)

        self.ws_edit_widget = WsEditWidget()
        self.ws_edit_widget.setMaximumWidth(desktop_rect.width() * 0.8 * 0.15)
        self.right_v_layout.addWidget(self.ws_edit_widget)

        # Submit Buttons

        buttons_layout = QHBoxLayout()

        self.insert_button = QPushButton("新增记录")
        self.update_button = QPushButton("替换记录")

        self.insert_button.clicked.connect(self._on_insert_button_clicked)

        buttons_layout.addWidget(self.insert_button)
        buttons_layout.addWidget(self.update_button)

        self.right_v_layout.addLayout(buttons_layout)

    def update_info(self):
        self.ws_list_widget.clear()
        for ws_data in self.ws_data_list:
            self.ws_list_widget.addItem(str(ws_data))

    def _on_current_item_changed(self):
        now_ws_data = self.ws_data_list[self.ws_list_widget.currentIndex().row()]
        first_show_time = self.paint_board.now_data_collection.get_first_show_time(now_ws_data.follower)
        highlights = self.paint_board.now_data_collection.get_highlight(now_ws_data.follower)
        self.player.setPosition(first_show_time)
        self.paint_board.set_ws_focus(now_ws_data)
        self.ws_edit_widget.set_ws_data(now_ws_data)
        self.progress_bar.set_highlight(highlights)

    def _on_unselect_button_clicked(self):
        self.paint_board.clear_id()
        self.ws_edit_widget.clear_ws_data()
        self.progress_bar.clear_highlight()
        self.ws_list_widget.clearSelection()

    def _on_delete_button_clicked(self):
        index = self.ws_list_widget.currentIndex().row()
        if index >= 0:
            self.ws_data_list.pop(index)
            self.update_info()
        self._on_unselect_button_clicked()

    def _on_insert_button_clicked(self):
        ws_data = self.ws_edit_widget.get_ws_data()
        print(ws_data)
        if ws_data:
            self.ws_data_list.append(ws_data)
            self.update_info()

    def open(self, file_path: str):
        self.ws_data_list = read_ws(file_path)
        self.now_file_path = file_path
        self.update_info()
        return 0

    def save(self, save_path: str):
        try:
            with open(save_path, "w", encoding="utf8") as f:
                f.write("# This file was generated by modifier\n")
                for ws_data in self.ws_data_list:
                    f.write(str(ws_data) + "\n")

        except IOError as e:
            logger.error("Unable to save ws: " + save_path)
            logger.error(e)
            return -1
        return 0
