from typing import List

from PySide2.QtWidgets import QListWidget, QPushButton

from manage_tools.widgets.data_edit_widget import DataEditWidget
from manage_tools.widgets.modifier_widget_parent import ModifierWidget
from operators.data_reader import VideoData, read_data
from operators.motlogging import logger


class DataModifierWidget(ModifierWidget):
    video_data_list: List[VideoData]
    file_ext = ".data"
    now_file_path = ""
    id_list = []

    def __init__(self):
        super(DataModifierWidget, self).__init__()
        self.paint_board.init_show_all = True

        self.id_list_widget = QListWidget(self)
        self.id_list_widget.setMaximumWidth(200)
        self.id_list_widget.currentItemChanged.connect(self._on_current_item_changed)

        self.delete_button = QPushButton("删除选中记录")
        self.delete_button.clicked.connect(self._on_delete_button_clicked)
        self.unselect_button = QPushButton("取消选择")
        self.unselect_button.clicked.connect(self._on_unselect_button_clicked)

        self.data_edit_widget = DataEditWidget()

        self.data_edit_widget.setMaximumWidth(200)

        self.submit_button = QPushButton("确认修改")
        self.submit_button.clicked.connect(self._on_submit_button_clicked)

        self.left_v_layout.addWidget(self.id_list_widget)
        self.left_v_layout.addWidget(self.delete_button)
        self.left_v_layout.addWidget(self.unselect_button)
        self.right_v_layout.addWidget(self.data_edit_widget)
        self.right_v_layout.addWidget(self.submit_button)

    def _on_current_item_changed(self):
        now_id = self.id_list[self.id_list_widget.currentIndex().row()]
        first_show_time = self.paint_board.now_data_collection.get_first_show_time(now_id)
        highlights = self.paint_board.now_data_collection.get_highlight(now_id)
        self.player.setPosition(first_show_time)
        self.paint_board.set_id(now_id, False)
        self.progress_bar.set_highlight(highlights)

    def _on_submit_button_clicked(self):
        new_id = self.data_edit_widget.get_data()
        if new_id:
            now_id = self.id_list[self.id_list_widget.currentIndex().row()]
            for data in self.video_data_list:
                if data.no == now_id:
                    data.no = new_id

        self.update_info()
        self.paint_board.now_data_collection.update_data(self.video_data_list)

    def _on_delete_button_clicked(self):
        now_id = self.id_list[self.id_list_widget.currentIndex().row()]
        index = 0
        while index < len(self.video_data_list):
            if self.video_data_list[index].no == now_id:
                self.video_data_list.pop(index)
                continue
            index += 1

        self.update_info()
        self.paint_board.now_data_collection.update_data(self.video_data_list)
        self._on_unselect_button_clicked()

    def _on_unselect_button_clicked(self):
        self.paint_board.clear_id()
        self.data_edit_widget.clear()
        self.progress_bar.clear_highlight()
        self.id_list_widget.clearSelection()

    def update_info(self):
        self.id_list_widget.clear()

        self.id_list = []
        for data in self.video_data_list:
            if data.no not in self.id_list:
                self.id_list.append(data.no)

        for id in self.id_list:
            self.id_list_widget.addItem(str(id))

    def open(self, file_path: str):
        self.video_data_list = read_data(file_path)
        self.update_info()
        return 0

    def save(self, save_path: str):
        try:
            with open(save_path, "w", encoding="utf8") as f:
                f.write("# This file was generated by modifier\n")
                for data in self.video_data_list:
                    f.write(str(data) + "\n")

        except IOError as e:
            logger.error("Unable to save data: " + save_path)
            logger.error(e)
            return -1
        return 0
